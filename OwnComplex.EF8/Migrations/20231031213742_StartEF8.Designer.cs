// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OwnComplex.EF8.OwnModel;

#nullable disable

namespace OwnComplex.EF8.Migrations
{
    [DbContext(typeof(TestEF8Context))]
    [Migration("20231031213742_StartEF8")]
    partial class StartEF8
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OwnComplex.Domain.Entities.PersonEntity", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.ComplexProperty<Dictionary<string, object>>("Contact", "OwnComplex.Domain.Entities.PersonEntity.Contact#Contact", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.ComplexProperty<Dictionary<string, object>>("PhoneNumbers", "OwnComplex.Domain.Entities.PersonEntity.Contact#Contact.PhoneNumbers#List<PhoneNumber>", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int>("Capacity")
                                        .HasColumnType("int");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("MedicalDetails", "OwnComplex.Domain.Entities.PersonEntity.MedicalDetails#MedicalDetails", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("ProgramingImpairment")
                                .HasColumnType("bit");

                            b1.Property<string>("ProgramingImpairmentLevel")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MedicalConditions")
                                .HasColumnType("nvarchar(max)");

                            b1.ComplexProperty<Dictionary<string, object>>("BloodType", "OwnComplex.Domain.Entities.PersonEntity.MedicalDetails#MedicalDetails.BloodType#NamedProperty", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PersonalDetails", "OwnComplex.Domain.Entities.PersonEntity.PersonalDetails#PersonalDetails", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset?>("DateOfBirth")
                                .HasColumnType("datetimeoffset");

                            b1.ComplexProperty<Dictionary<string, object>>("Gender", "OwnComplex.Domain.Entities.PersonEntity.PersonalDetails#PersonalDetails.Gender#NamedProperty", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("HomeAddress", "OwnComplex.Domain.Entities.PersonEntity.PersonalDetails#PersonalDetails.HomeAddress#Address", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("AddressLine1")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("AddressLine2")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<Guid?>("CountryId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("County")
                                        .IsRequired()
                                        .HasMaxLength(60)
                                        .HasColumnType("nvarchar(60)");

                                    b2.Property<string>("PostCode")
                                        .IsRequired()
                                        .HasMaxLength(10)
                                        .HasColumnType("nvarchar(10)");
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("WorkAddress", "OwnComplex.Domain.Entities.PersonEntity.PersonalDetails#PersonalDetails.WorkAddress#Address", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("AddressLine1")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("AddressLine2")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<Guid?>("CountryId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("County")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<string>("PostCode")
                                        .IsRequired()
                                        .HasMaxLength(10)
                                        .HasColumnType("nvarchar(10)");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("RiskProfile", "OwnComplex.Domain.Entities.PersonEntity.RiskProfile#List<EntityId>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Capacity")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Roles", "OwnComplex.Domain.Entities.PersonEntity.Roles#List<EntityId>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Capacity")
                                .HasColumnType("int");
                        });

                    b.HasKey("TenantId", "Id");

                    b.ToTable("People", "EF8");
                });

            modelBuilder.Entity("OwnComplex.Domain.Entities.PersonEntity", b =>
                {
                    b.OwnsMany("OwnComplex.Domain.ValueObjects.Team", "Ancestors", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityTenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AssignedTeamId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("PersonEntityTenantId", "PersonEntityId", "Id");

                            b1.ToTable("People_Ancestors", "EF8");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityTenantId", "PersonEntityId");
                        });

                    b.OwnsMany("OwnComplex.Domain.ValueObjects.Team", "Descendants", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityTenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ManagedTeamId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("PersonEntityTenantId", "PersonEntityId", "Id");

                            b1.ToTable("People_Descendants", "EF8");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityTenantId", "PersonEntityId");
                        });

                    b.OwnsMany("OwnComplex.Domain.ValueObjects.Tracker", "Trackers", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityTenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("TrackerType")
                                .HasColumnType("int");

                            b1.Property<string>("MobileNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonEntityTenantId", "PersonEntityId", "Id");

                            b1.ToTable("Tracker", "EF8");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityTenantId", "PersonEntityId");
                        });

                    b.OwnsMany("OwnComplex.Domain.ValueObjects.EmergencyContact", "EmergencyContacts", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityTenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("PersonEntityTenantId", "PersonEntityId", "Id");

                            b1.ToTable("EmergencyContact", "EF8");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityTenantId", "PersonEntityId");

                            b1.OwnsOne("OwnComplex.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b2 =>
                                {
                                    b2.Property<Guid>("EmergencyContactPersonEntityTenantId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("EmergencyContactPersonEntityId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("EmergencyContactId")
                                        .HasColumnType("int");

                                    b2.Property<string>("CountryCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(450)");

                                    b2.HasKey("EmergencyContactPersonEntityTenantId", "EmergencyContactPersonEntityId", "EmergencyContactId");

                                    b2.HasIndex("Number");

                                    SqlServerIndexBuilderExtensions.IsClustered(b2.HasIndex("Number"), false);

                                    b2.ToTable("EmergencyContact", "EF8");

                                    b2.WithOwner()
                                        .HasForeignKey("EmergencyContactPersonEntityTenantId", "EmergencyContactPersonEntityId", "EmergencyContactId");
                                });

                            b1.Navigation("PhoneNumber")
                                .IsRequired();
                        });

                    b.OwnsOne("OwnComplex.Domain.ValueObjects.PhysicalDetails", "PhysicalDetails", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityTenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("Height")
                                .HasColumnType("int");

                            b1.HasKey("PersonEntityTenantId", "PersonEntityId");

                            b1.ToTable("People", "EF8");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityTenantId", "PersonEntityId");

                            b1.OwnsMany("OwnComplex.Domain.ValueObjects.DistinguishingFeature", "DistinguishingFeatures", b2 =>
                                {
                                    b2.Property<Guid>("PhysicalDetailsPersonEntityTenantId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("PhysicalDetailsPersonEntityId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("AdditionalInformation")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("Type")
                                        .HasColumnType("int");

                                    b2.HasKey("PhysicalDetailsPersonEntityTenantId", "PhysicalDetailsPersonEntityId", "Id");

                                    b2.ToTable("DistinguishingFeature", "EF8");

                                    b2.WithOwner()
                                        .HasForeignKey("PhysicalDetailsPersonEntityTenantId", "PhysicalDetailsPersonEntityId");
                                });

                            b1.OwnsOne("OwnComplex.Domain.ValueObjects.NamedProperty", "Build", b2 =>
                                {
                                    b2.Property<Guid>("PhysicalDetailsPersonEntityTenantId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("PhysicalDetailsPersonEntityId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.HasKey("PhysicalDetailsPersonEntityTenantId", "PhysicalDetailsPersonEntityId");

                                    b2.ToTable("People", "EF8");

                                    b2.WithOwner()
                                        .HasForeignKey("PhysicalDetailsPersonEntityTenantId", "PhysicalDetailsPersonEntityId");
                                });

                            b1.OwnsOne("OwnComplex.Domain.ValueObjects.NamedProperty", "EyeColour", b2 =>
                                {
                                    b2.Property<Guid>("PhysicalDetailsPersonEntityTenantId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("PhysicalDetailsPersonEntityId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.HasKey("PhysicalDetailsPersonEntityTenantId", "PhysicalDetailsPersonEntityId");

                                    b2.ToTable("People", "EF8");

                                    b2.WithOwner()
                                        .HasForeignKey("PhysicalDetailsPersonEntityTenantId", "PhysicalDetailsPersonEntityId");
                                });

                            b1.OwnsOne("OwnComplex.Domain.ValueObjects.NamedProperty", "HairColour", b2 =>
                                {
                                    b2.Property<Guid>("PhysicalDetailsPersonEntityTenantId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("PhysicalDetailsPersonEntityId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.HasKey("PhysicalDetailsPersonEntityTenantId", "PhysicalDetailsPersonEntityId");

                                    b2.ToTable("People", "EF8");

                                    b2.WithOwner()
                                        .HasForeignKey("PhysicalDetailsPersonEntityTenantId", "PhysicalDetailsPersonEntityId");
                                });

                            b1.Navigation("Build");

                            b1.Navigation("DistinguishingFeatures");

                            b1.Navigation("EyeColour");

                            b1.Navigation("HairColour");
                        });

                    b.OwnsMany("OwnComplex.Domain.ValueObjects.Subscription", "AssignedSubscriptions", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityTenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("AvailableQuantity")
                                .HasColumnType("int");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("PersonEntityTenantId", "PersonEntityId", "Id");

                            b1.ToTable("Subscription", "EF8");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityTenantId", "PersonEntityId");
                        });

                    b.OwnsMany("OwnComplex.Domain.ValueObjects.Tag", "Tags", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityTenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonEntityTenantId", "PersonEntityId", "Id");

                            b1.ToTable("Tag", "EF8");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityTenantId", "PersonEntityId");
                        });

                    b.OwnsMany("OwnComplex.Domain.ValueObjects.VehicleDetails", "Vehicles", b1 =>
                        {
                            b1.Property<Guid>("PersonEntityTenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PersonEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Model")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<bool>("VehicleOwnedOrUsed")
                                .HasColumnType("bit");

                            b1.Property<string>("VehicleRegistration")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("PersonEntityTenantId", "PersonEntityId", "Id");

                            b1.ToTable("VehicleDetails", "EF8");

                            b1.WithOwner()
                                .HasForeignKey("PersonEntityTenantId", "PersonEntityId");
                        });

                    b.Navigation("AssignedSubscriptions");

                    b.Navigation("Ancestors");

                    b.Navigation("Trackers");

                    b.Navigation("EmergencyContacts");

                    b.Navigation("Descendants");

                    b.Navigation("PhysicalDetails")
                        .IsRequired();

                    b.Navigation("Tags");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
